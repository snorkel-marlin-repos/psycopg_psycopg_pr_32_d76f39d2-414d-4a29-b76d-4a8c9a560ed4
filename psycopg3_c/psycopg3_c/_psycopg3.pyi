"""
Stub representaton of the public objects exposed by the _psycopg3 module.

TODO: this should be generated by mypy's stubgen but it crashes with no
information. Will submit a bug.
"""

# Copyright (C) 2020-2021 The Psycopg Team

from typing import Any, Iterable, List, Optional, Sequence, Tuple

from psycopg3 import proto
from psycopg3.adapt import Dumper, Loader, AdaptersMap, Format
from psycopg3.connection import BaseConnection
from psycopg3 import pq
from psycopg3.pq.proto import PGconn, PGresult

class Transformer(proto.AdaptContext):
    def __init__(self, context: Optional[proto.AdaptContext] = None): ...
    make_row: proto.RowMaker
    @property
    def connection(self) -> Optional[BaseConnection]: ...
    @property
    def adapters(self) -> AdaptersMap: ...
    @property
    def pgresult(self) -> Optional[PGresult]: ...
    def set_pgresult(
        self, result: Optional["PGresult"], set_loaders: bool = True
    ) -> None: ...
    def set_row_types(
        self, types: Sequence[int], formats: Sequence[pq.Format]
    ) -> None: ...
    def dump_sequence(
        self, params: Sequence[Any], formats: Sequence[Format]
    ) -> Tuple[List[Any], Tuple[int, ...], Sequence[pq.Format]]: ...
    def get_dumper(self, obj: Any, format: Format) -> Dumper: ...
    def load_rows(self, row0: int, row1: int) -> List[proto.Row]: ...
    def load_row(self, row: int) -> Optional[proto.Row]: ...
    def load_sequence(
        self, record: Sequence[Optional[bytes]]
    ) -> Tuple[Any, ...]: ...
    def get_loader(self, oid: int, format: pq.Format) -> Loader: ...

# Generators
def connect(conninfo: str) -> proto.PQGenConn[PGconn]: ...
def execute(pgconn: PGconn) -> proto.PQGen[List[PGresult]]: ...

# Copy support
def format_row_text(
    row: Sequence[Any], tx: proto.Transformer, out: Optional[bytearray] = None
) -> bytearray: ...
def format_row_binary(
    row: Sequence[Any], tx: proto.Transformer, out: Optional[bytearray] = None
) -> bytearray: ...
def parse_row_text(data: bytes, tx: proto.Transformer) -> Tuple[Any, ...]: ...
def parse_row_binary(
    data: bytes, tx: proto.Transformer
) -> Tuple[Any, ...]: ...

# vim: set syntax=python:
